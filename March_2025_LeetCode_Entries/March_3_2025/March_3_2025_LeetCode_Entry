# LeetCode
LeetCode Solutions and Notes

Day 62 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

March 3, 2025

LeetCode Problem: Maximum Average Subarray I
Link: https://leetcode.com/problems/maximum-average-subarray-i/

Level: Easy

**Notes:**

Goal: You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

- initial thoughts: since the goal involves returning a contiguous subarray,
cannot rearrange elements
- could use a sliding window approach to keep track of the sum
- instead of computing the sum for every subarray, maintain a running sum of k elements
- as the iteration continues, substract the outgoing element and add the incoming element
to update the sum in constant time
- key idea: keep track of the maximum sum while iterating
- calculate the maximum average by dividing the max sum by k

Time Complexity:

- Computing the first window sum (sum(nums[:k])) is O(k).
- Sliding the window across the array is a loop that runs (n-k) times
(for i in range(k, len(nums))) is O(n - k) â‰ˆ O(n).
- Returning the result is just simple division (max_sum / k), O(1).
- O(k) (first sum) + O(n) (sliding window) + O(1) (division)
- Since k is at most n, the dominant term is O(n).
- Summary: The total time complexity is O(n).

Space Complexity:

- Not making a copy of the array, only reading from it.
- Variables used, window_sum, max_sum, k, i, are all O(1).
- Summary: The total space complexity is O(1).

Solution: see attached .py file (Python 3)

Revisit? No
