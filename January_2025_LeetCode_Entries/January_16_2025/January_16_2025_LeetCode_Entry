# LeetCode
LeetCode Solutions and Notes

Day 16 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 16, 2025

LeetCode Problem: Valid Anagram 
Link: https://leetcode.com/problems/valid-anagram/ 

Level: Easy

**Notes:**

Goal: Given two strings s and t, return true if t is an anagram of s, and false otherwise.

- initial thoughts: can approach this problem using a dictionary (hash map)
to store the frequency of each character in s.
- first check if the lengths of the strings are equal, because anagrams must have
the same amount of characters.
- use a dictionary to store the frequency of each character in s.
- loop through each character in s and update its count in the dictionary.
- loop through each character in t and for each character decrease its count
in the dictionary.
- if a character in t is not in the dictionary or its count becomes negative,
return False
- if all counts in the dictionary are zero, return true.

Time Complexity:

- Building the first for loop, iterate, check if character exists, update frequency.
- These operations take O(n) time where n is the length of s.
- Building the second for loop, check if character exists, check if frequency is zero,
decrease the frequency count.
- These operations take O(m) time where m is the length of t.
- The size of the dictionary is at most the number of unique characters in s,
which is bound by a constant 26 (for lowercase) letters in the English alphabet, O(1).
- Since n = m, both strings have to be the same length to be anagrams.
- The overall time complexity is O(n).

Space Complexity:

- The maximum size for the dictionary is the number of unique characters in s, 
which is a constant O(1) for lowercase English letters.
- No other significant space is used other than the dictionary.
- Summary: The overall space complexity is O(1).

Solution: see attached .py file (Python 3)

Revisit? Yes
