# LeetCode
LeetCode Solutions and Notes

Day 7 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 7, 2025

LeetCode Problem: Longest Common Prefix
Link: https://leetcode.com/problems/longest-common-prefix/   

Level: Easy

**Notes:**

Goal: Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

- first check for empty input, return an empty string "" if the input array strs is empty
- initialize the prefix, start with the first string in the array as the initial prefix
- iterate through the array, compare the prefix with each subsequent string in the array
- while the current string does not start with the prefix, trim the last character from the prefix
- stop trimming when the current string starts with the prefix or the prefix becomes empty
- after comparing with all strings, return the final prefix

Time Complexity;

- The outer for loop iterates through the strings in the input array strs,
starting from the second string.
- If the input contains n strings, this loop runs n - 1 times.
- The inner while loop compares characters of the current prefix with the current string.
- Worst-case scenario, the loop compares every character of the prefix with every character
of the current until either a mismatch is found, or the entire prefix is consumed.
- Suppose L is the length of the shortest string in the array, (since the common 
prefix cannot exceed this length). 
- Worst-case each of the n strings is compared character by character for up to L characters.
- Summary: The total time complexity is O(n * L), where n is the number of strings,
and L is the length of the shortest string.

Space Complexity:

- The prefix variable stores a substring of the first string. Its size is at most L,
the length of the shortest string.
- Other variables, such as common_index and the loop counters, require O(1) space. 
- The algorithm does not use any auxiliary data structures like arrays, dictionaries, or sets.
- Summary: The total space complexity is O(1) as the space used does not grow with input size.

Solution: see attached .py file (Python 3)

Revisit? Yes
