# LeetCode
LeetCode Solutions and Notes

Day 28 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 28, 2025

LeetCode Problem: Guess Number Higher or Lower
Link: https://leetcode.com/problems/guess-number-higher-or-lower/  

Level: Easy

**Notes:**

Goal: We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API int guess(int num), which returns three possible results:

-1: Your guess is higher than the number I picked (i.e. num > pick).
1: Your guess is lower than the number I picked (i.e. num < pick).
0: your guess is equal to the number I picked (i.e. num == pick).
Return the number that I picked.

- initial idea: searching for a target within a sorted range (1 to n) so
binary search is the best approach
- the middle element (mid) is checked against pick
- if guess(mid) == 0, we found the answer
- if guess(mid) == -1, mid is too high, search left half (high = mid - 1)
- if guess(mid) == 1, mid is too low, search right half (low = mid + 1)
- repeat until you find pick

Time Complexity:

- At each step, we divide the search space in half.
- Start with n possible numbers.
- After 1st iteration, we have n/2 numbers left.
- After 2nd iteration, we have n/4.
- After k iterations, we have n / 2^k left.
- Stop when there's only one number left, this happens when n / 2^k = 1.
- After multiplying both sides by 2, and taking the log, this can be translated to k = log2(n).
- Summary: The total time complexity is O(log n) because each step halves the search space.
