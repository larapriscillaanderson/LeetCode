# LeetCode
LeetCode Solutions and Notes

Day 23 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 23, 2025

LeetCode Problem: Longest Common Prefix REVISITED
Link: https://leetcode.com/problems/longest-common-prefix/   

Level: Easy

**Notes:**

Goal: Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

- start with the first string as the initial assumption for the prefix
- terate through all strings in the list, checking if the current string starts with the prefix
- if it doesnâ€™t, shorten the prefix by removing the last character
- if the prefix becomes empty at any point, return an empty string
- at the end of the loop, the prefix will be the longest common prefix

Time Complexity:

- The outer loop iterates through all the strings in the input array strs.
- If there are n strings in the array, the loop will run n times.
- The while loop reduces the prefix character by character until it matches 
the beginning of the current string or becomes empty.
- In the worst case, the prefix might have to compare all its characters with 
the current string and be reduced entirely.
- For the longest string in the array, assume its length is m. So, in the worst case,
might have up to m comparisons for each string.
- For each of the n strings, the algorithm may perform up to m comparisons in the while loop.
- Summary: The total time complexity is O(n * m).
- n is the number of strings in the input array.
- m is the length of the longest string in the array.

Space Complexity:

- Input Strings: The function doesn't modify or copy the input array; it operates directly on it.
- Prefix Variable: Only a single string prefix is stored, whose length depends on the 
longest common prefix but is never more than the length of the longest string.
- Auxiliary Space: No additional data structures (like arrays or dictionaries) are used.
Space Complexity: O(1) (constant space)

Solution: see attached .py file (Python 3)

Revisit? No
