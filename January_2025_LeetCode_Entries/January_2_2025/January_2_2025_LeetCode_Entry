# LeetCode
LeetCode Solutions and Notes

Day 2 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 2, 2025

LeetCode Problem: Palindrome Number
Link: https://leetcode.com/problems/palindrome-number/description/ 

Level: Easy

**Notes:**

Goal: Given an integer x, return true if x is a palindrome, and false otherwise.

- [::-1] this is [start:end: step]
- [::1] starting from the beginning and going to the end with a step of 1, same as [0:len(sequence):1]
- [::-1] start at the end and going towards the beginning with a step of -1, effectively reversing the sequence
- Note: if the parameter is an integer, use str() conversion

Time Complexity:

- The negative number check (if x < 0:) is a constant-time operation: O(1).
- The string conversion and reverse comparison (if str(x) == str(x)[::-1]:) can be further broken down.
- The conversion of x to a string(str(x)) takes O(n) time, where n is the number of digits in x.
- Reversing the string (str(x)[::-1]) takes O(n) time since each character is accessed only once.
- The string comparison (==) compares two strings of length n and takes O(n) time, 
as every character in both strings needs to be checked.
- Summary: Since the dominant operations in this function involve converting the integer to a string, 
reversing the string, and comparing it, the overall time complexity is O(n).

Space Complexity:

- The string conversion of x (str(x)) requires allocating space for a new string.
- The size of this string is proportional to the number of digits in x, which is denoted as n.
- This approach requires O(n) space.
- Creating the reversed string (str(x)[::-1]) also requires allocating new memory of size n,
where n is the number of digits in x. This space complexity is O(n).
- Comparing two strings (==) does not require additional space. The space complexity is O(1).
- Summary: The dominant space usage comes from creating the string representation of x,
x and its reversed version. Therefore, the overall space complexity is O(n), where n is
the number of digits in x.

Solution: see attached .py file (Python 3)

Revisit? No
