# LeetCode
LeetCode Solutions and Notes

Day 26 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 26, 2025

LeetCode Problem: Find Peak Element
Link: https://leetcode.com/problems/find-peak-element/  

Level: Medium

**Notes:**

Goal: A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. 
If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. 
In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

- the O(log n) time suggests using a binary search approach
- a peak element is strictly greater than its neighbors
- if nums[mid] > nums[mid + 1], then the peak must lie on the left half (including mid)
- if nums[mid] < nums[mid + 1], then the peak must lie on the right half 
- first step is to initialize the left and right pointers
- left = 0 (start of the array)
- right = len(nums) - 1 (end of the array)
- run a binary search loop while left < right
- calculate the midpoint using the overflow stabilizer equation
- mid = left + (right - left) // 2 
- if nums[mid] > nums[mid + 1], it means the peak is on the left side (including mid), set right = mid
- otherwise, the peak is on the right side (excluding mid), set left = mid + 1
- when the loop ends, left == right, and we have found a peak index, return left
- only potential improvement is adding comments for edge cases like a single-element array 
or two-element array to make it clear that the implementation handles those implicitly

Time Complexity:

- No additional data structures or operations outside the loop affect the time complexity.
- In each iteration, we calculate the midpoint (mid) in O(1) time.
- Either move the left pointer (left = mid + 1) or the right pointer (right = mid), 
reducing the search space by half.
- The maximum number of iterations is proportional to the logarithm of the input size: O(log n).
- Edge Case: If the input array has only one element (n = 1), 
the loop doesn’t run, and we directly return the peak in O(1) time.
- Summary: The total time complexity is O(log n) because of the constant halving in binary search.
