# LeetCode
LeetCode Solutions and Notes

Day 3 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 3, 2025

LeetCode Problem: Valid Palindrome
Link: https://leetcode.com/problems/valid-palindrome/ 

Level: Easy

**Notes:**

Goal: Given a string s, return true if it is a palindrome, 
or false otherwise.

- there are 2 ways to solve this, one is using .alnum
- the other is by using your own alpha numeric checker with ASCII symbols A-Z, a-z, 0-9 
- the other way uses L and R pointers
- run a while loop while the L != R
- end the loop with incrementing L and decrementing R

Time Complexity: 

- The isalnum() function is designed to check a single character to determine if it’s alphanumeric.
Since it doesn’t depend on the size of the string or other variables, 
its execution time remains constant O(1).
- After the loop finishes, there is a check to see if new_string is equal to its reverse. 
- Reversing a string takes O(n) time, where n is the length of the string. 
- Summary: Thus, the overall time complexity is O(n), where n is the length of the input string s.

Space Complexity:

- In the loop, you construct new_string by appending each alphanumeric character
(converted to lowercase).
- In the worst-case scenario, if all characters in s are alphanumeric, 
new_string will end up being the same length as s.
- This means the space used by new_string grows linearly with the input size, O(n).
- Each iteration of the loop uses a temporary variable character to store the current character.
- Since this is a single variable, its space usage is O(1) (constant space).
- The reversal operation (new_string[::-1]) creates a reversed string, which worst-case,
- is also as long as new_string, taking up an additional O(n) space.
- The Boolean result (return new_string == new_string[::-1]) checks if the two strings are equal.
- It doesn't require additional storage, just returns True or False value, O(1).
- Summary: The dominant factor here is the space used by new_string, O(n), and its reversed copy, 
O(n), so the total space complexity is: O(n).

Solution: see attached .py file (Python 3)

Revisit? No
