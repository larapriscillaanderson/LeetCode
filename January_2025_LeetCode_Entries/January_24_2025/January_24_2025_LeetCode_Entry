# LeetCode
LeetCode Solutions and Notes

Day 24 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 24, 2025

LeetCode Problem: Single Number
Link: https://leetcode.com/problems/first-bad-version/  

Level: Easy

**Notes:**

Goal: You are a product manager and currently leading a team to develop a new product. 
Unfortunately, the latest version of your product fails the quality check. 
Since each version is developed based on the previous version, 
all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. 
Implement a function to find the first bad version. You should minimize the number of calls to the API.

- want to find the first "bad version" in a range of versions [1, 2, ..., n]
- if a version is bad, then all versions after it are bad too
- the API isBadVersion(version) tells us whether a given version is bad
- the goal is to use binary search to reduce the number of calls to isBadVersion
- Note: binary search works because the sequence has two clear regions:
- all versions before the first bad version are good
- all versions starting from the first bad version are bad
- to start, initialize the left and right pointers
- use mid = left + (right - left) // 2 to find the midpoint
- call isBadVersion(mid)
- if true, shift right to mid because the first bad version 
is in the left half or could be mid itself
- if false, shift left to mid + 1 because all versions before or at mid are good
- repeat until left == right, which will be the first bad version
- return left

Time Complexity:

- Binary search splits the search space in half at each step.
- At each iteration, the size of the search range reduces by half, n, n/2, n/4, ... 1.
- The number of steps required to reduce the range to 1 is equal to the number of 
times you can divide n by 2.
- Mathematically this is equivalent to log2(n).
- In each iteration, the function calls isBadVersion(mid) exactly once.
- Since the number of iterations is O(log n), the number of isBadVersion calls is also O(log n).
- Summary: The binary search takes O(log n) iterations, total time complexity is O(log n).
