# LeetCode
LeetCode Solutions and Notes

Day 27 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 27, 2025

LeetCode Problem: Find First and Last Position of Element in Sorted Array
Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/  

Level: Medium

**Notes:**

Goal: Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

- initialize low = 0 and high = length of nums - 1
- while low <= high:
- compute mid = low + (high - low) // 2
- if nums[mid] == target, store mid as the potential answer and move high to mid - 1 
(to search left for the first occurrence)
- if nums[mid] < target, move low to mid + 1
- otherwise, move high to mid - 1
- return the position if found; otherwise, return -1
- if nums[mid] == target, store mid as the potential answer and move low to mid + 1 
(to search right for the last occurrence)
- if either the first or last position is not found, return [-1, -1]
- otherwise, return [first_position, last_position]

Time Complexity:

- The algorithm uses two binary searches: one to find the first occurrence of the target and the other to find the last occurrence.
- Each binary search operates on a sorted array, halving the search space in each iteration.
- The time complexity of a single binary search is O(log n).
- Since we perform two binary searches, the total time complexity is O(2â‹…logn) = O(log n).

Space Complexity:

- The algorithm does not use any additional data structures or create new arrays.
- All operations are performed in place using a constant amount of extra variables.
- Summary: The total space complexity is O(1).

Solution: see attached .py file (Python 3)

Revisit? No
