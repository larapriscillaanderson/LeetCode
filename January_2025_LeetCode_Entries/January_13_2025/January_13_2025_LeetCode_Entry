# LeetCode
LeetCode Solutions and Notes

Day 13 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 13, 2025

LeetCode Problem: Remove Duplicates from Sorted Array
Link: https://leetcode.com/problems/remove-duplicates-from-sorted-array/  

Level: Easy

**Notes:**

Goal: Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place 
such that each unique element appears only once. The relative order of the elements should be kept the same. 
Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order 
they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

- initial thoughts: use some type of loop, iterate, find equal, then use .remove
- however, .remove method in Python is computationally expensive
- the .remove method will only remove an element after it has searched the array
- this can take O(n) time complexity for each call
- if .remove is placed within a loop, it can then become a nested operation
- nested operations have O(n^2) worst case time complexity, making it slower for larger arrays
- instead, use pointers like in linked lists to keep track of the array elements
- current = nums[read_index]
- previous = nums[read_index - 1]
- next = nums[read_index + 1] 
- for arrays, pointers are just indices tracking positions
- for linked lists, pointers are references to memory locations of nodes
- Note: in arrays, there is random access, so you can jump directly to any index
- Note: in linked lists, there is no random access, they require sequential traversal
- this problem can use write_index as a destination pointer
- then read_index loops through the array
- when a unique number is found, it is written to the position marked by write_index
- write_index is then incremented to prepare for the next unique number

Time Complexity:

- The problem involves a single for loop that iterates through the array nums.
- The loop runs from read_index = 1 to len(nums) - 1, covering all 
n - 1 elements of the array after the first.
- Each iteration performs constant time operations.
- A constant-time comparison: nums[read_index] != nums[read_index - 1], O(1).
- At most one assignment: nums[write_index] = nums[read_index], O(1).
- An increment operation for write_index, O(1).
- Summary: Since these operations are constant time, and the loop runs for n - 1
iterations, the total time complexity is O(n), where n is the length of the nums array.

Space Complexity:

- The algorithm modifies the nums array in place without the use of additional
data structures for storing elements.
- The space used for variables is constant, (write_index and read_index)
is constant, O(1).
- No auxiliary data structures are being used such as dictionaries, lists, or sets.
- Note: auxiliary data structures are extra data structures that you use in an
algorithm in addition to the input data structure.
- The purpose of avoiding the use of auxiliary data structures is to have
better space complexity (O(1) vs O(n)).
- The algorithm does not depend on input size n for additional memory allocation.
- Summary: The total space complexity is O(1), as the algorithm only uses a few 
variables and modifies the array in-place without requiring extra space.

Solution: see attached .py file (Python 3)

Revisit? Yes
