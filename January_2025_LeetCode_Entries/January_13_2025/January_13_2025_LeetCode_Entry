# LeetCode
LeetCode Solutions and Notes

Day 13 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 13, 2025

LeetCode Problem: Remove Duplicates from Sorted Array
Link: https://leetcode.com/problems/remove-duplicates-from-sorted-array/  

Level: Easy

**Notes:**

Goal: Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

- initial thoughts: use some type of loop, iterate, find equal, then use .remove
- however, .remove method in Python is computationally expensive
- the .remove method will only remove an element after it has searched the array
- this can take O(n) time complexity for each call
- if .remove is placed within a loop, it can then become a nested operation
- nested operations have O(n^2) worst case time complexity, making it slower for larger arrays
- instead, use pointers like in linked lists to keep track of the array elements
- current = nums[read_index]
- previous = nums[read_index - 1]
- next = nums[read_index + 1] 
- for arrays, pointers are just indices tracking positions
- for linked lists, pointers are references to memory locations of nodes
- Note: in arrays, there is random access, so you can jump directly to any index
- Note: in linked lists, there is no random access, they require sequential traversal
- this problem can use write_index as a destination pointer
- then read_index loops through the array
- when a unique number is found, it is written to the position marked by write_index
- write_index is then incremented to prepare for the next unique number
