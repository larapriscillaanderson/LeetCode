# LeetCode
LeetCode Solutions and Notes

Day 15 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

January 15, 2025

LeetCode Problem: Contains Duplicate
Link: https://leetcode.com/problems/contains-duplicate/description/

Level: Easy

**Notes:**

Goal: Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

- initial thoughts: can approach this problem using a hash set to store seen numbers
- or could use a sorted array, and search through it
- Note: the hash set is more efficient, versus the sorted array approach 
because sorting and then looping takes time
- create a hash set to store the numbers that are seen
- if a duplicate is found, return True 
- otherwise, if it's not found then add the number to the hash set
- if the loop finished without finding duplicates, return False

Time Complexity:

- This approach involves iterating through the input array and performing operations
related to the hash set, like add and in.
- The algorithm processes each element of the array nums exactly once.
- Looping through nums has a time complexity of O(n), where n is the size of the array.
- Hash set operation: checking if the element exists in the set, O(1).
- Hash set operation: adding the element to the set, O(1).
- Per element O(1), times iterating through the array x O(n) = O(n).
- The overall time complexity is O(n), where n is the size of the input array.

Space Complexity:

- The algorithm operates directly on the input array nums without modifying it.
- The hash set grows dynamically as elements are added.
- Worst-case scenario there are no duplicates, the set will store all n elements.
- A hash set is the only auxiliary data structure used.
- The size of the set depends on the size of the input n, making
the space usage proportional to n.
- Summary: The total space complexity is O(n), where n is the size of the input array.

Solution: see attached .py file (Python 3)

Revisit? Yes
