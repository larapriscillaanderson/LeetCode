LeetCode Solutions and Notes

Day 47 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

February 16, 2025

LeetCode Problem: 3Sum
Link: https://leetcode.com/problems/3sum/

Level: Medium

**Notes:**

Goal: Given an integer array nums, return all the triplets 
[nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, 
and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

- initial approach: find three numbers that sum up to zero, 
similar to the two-sum problem but with three elements instead of two
- sort the array to avoid duplicate triplets
- sorting will also make it easier to use a two-pointer approach
- use a loop like nums[i] to fix one number
- once one number is fixed, two remain
- the remaining two can be nums[left] and nums[right] = complement
- the equation would then be: complement = -nums[i] (so nums[left] + nums[right] = -nums[i])

Time Complexity:

- Sorting the array takes O(n log n) time.
- The outer loop runs for each element, O(n) times.
- Inside the loop, use of the two-pointer approach runs in O(n) time.
- Since the two-pointer method runs for every i, the nested operation is O(n²) in total.
- Summary: The total time complexity is O(n²).

Space Complexity:

- The sorting operation takes O(n) space (depending on the sorting algorithm, 
but usually ignored in in-place sorting).
- The result list stores unique triplets, which at worst could be O(n) space 
(though typically much smaller).
- No extra data structures like hash maps or heaps were used.
- Summary: The total space complexity is O(n).

Solution: see attached .py file (Python 3)

Revisit? Yes
