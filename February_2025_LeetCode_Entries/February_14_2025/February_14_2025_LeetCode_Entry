LeetCode Solutions and Notes

Day 45 of 2025, this is my LeetCode Journal Entry where I will contribute my notes and solutions for LeetCode problems.

February 14, 2025 ** Happy Valentine's Day (: <3 **

LeetCode Problem: 4Sum
Link: https://leetcode.com/problems/4sum/

Level: Medium

**Notes:**

Goal: Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

- initial approach: find four numbers that sum up to the target, 
could use two sum hash map idea/simple dictionary
- sort the array to avoid duplicate quadruplets
- sorting will also make it easier to use a two-pointer approach
- use a nested loop like nums[i] and nums[j] to fix two numbers
- once two numbers are found, two remain
- the remaining two can be nums[left] and nums[right] = complement
- the equation would then be complement = target - nums[i] - nums[j]

Time Complexity:

- Sorting the array takes O(n log n), where n is the length of the array.
- The outer loop over i runs O(n) times.
- The inner loop over j runs O(n) times for each i.
- For each pair (i, j), the two-pointer technique (left and right pointers) 
runs O(n) in the worst case.
- The overall complexity of the algorithm is dominated by the loops, 
with the sorting step contributing O(n log n).
- Summary: The total time complexity is O(nÂ³) due to the three nested loops 
(i, j, and two-pointer traversal).

Space Complexity:

- The array nums is sorted in-place, so no additional space is used for sorting.
- The result list stores the quadruplets, which can hold up to O(n) 
unique quadruplets in the worst case.
- We use only a constant amount of extra space for variables (i, j, left, right, etc.).
- Summary: The total space complexity is O(n) due to the space required for storing the result.

Solution: see attached .py file (Python 3)

Revisit? Yes
